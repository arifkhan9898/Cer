@using System.Web.UI.WebControls
@model System.Collections.IEnumerable
@(Html.X().ResourceManager())
@{
    ViewBag.Title = "GridPanel with Checkbox Selection Model - Ext.NET MVC Examples";
    var X = Html.X();
}

<!DOCTYPE html>

<!--[if IE 8]> <html lang="en" class="ie8 no-js"> <![endif]-->
<!--[if IE 9]> <html lang="en" class="ie9 no-js"> <![endif]-->
<!--[if !IE]><!-->
<html lang="en" class="no-js">
<!--<![endif]-->
<head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no" />
    <link rel="home" id="ApplicationPath" href="/" />
    <link rel="icon" type="image/x-icon" href="/favicon.ico" />
    <link href="/Content/bootstrap.css?v=W6N62RY2Q8MiUTZnVPCLKg2" rel="stylesheet" type="text/css" />
    <link href="/Content/site.css?v=uwjznzwqbnZDAaF4fSfu8Q2" rel="stylesheet" type="text/css" />

    <script src="/Scripts/jquery-1.10.2.js" type="text/javascript"></script>

    <script type="application/json" id="ScriptCulture">
        {"DateOrder":"mdy","DateFormat":"MM/dd/yyyy","DateSeparator":"/","DateTimeFormat":"MM/dd/yyyy HH:mm:ss","DecimalSeparator":".","GroupSepearator":","}
    </script>
    <script type="text/javascript">
        window.paceOptions = {
            minTime: 250,
            ghostTime: 250,
            restartOnRequestAfter: 250,
            ajax: { trackMethods: ['GET', 'POST'], trackWebSockets: true, ignoreURLs: [] }
        };
    </script>

    <script src="/Scripts/jquery.validate.js?v=n-VHJ2CiW0lEgUCLuaY31g2" type="text/javascript"></script>
    <script src="/Scripts/jquery.event.drag.js?v=Jh0aUpZ6m9qciziEDSwmXA2" type="text/javascript"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.10.2/moment.min.js"></script>
    <script>
        var template = '<span style="color:{0};">{1}</span>';

        var change = function (value) {
            return Ext.String.format(template, (value > 0) ? "green" : "red", value);
        };

        var pctChange = function (value) {
            return Ext.String.format(template, (value > 0) ? "green" : "red", value + "%");
        };

        function fillDetails(value) {
            $("#detailsName").val(value.data.Name);
            $("#detailsType").val(value.data.Type);
            $("#detailsDuration").val(1);
            $("#detailsId").text(value.data.Id);
        };

        function addOrder(value) {
            var id = $("#detailsId").text();
            var r = Ext.create('Order',
                {
                    Id: id,
                    Type: $("#detailsType").val(),
                    Name: $("#detailsName").val(),
                    Duration: $("#detailsDuration").val(),
                    TimeAdded: Ext.Date.clearTime(new Date())
                }),
                grid = value.up("gridpanel");

            grid.store.insert(0, r);
            grid.editingPlugin.startEditByPosition({ row: 0, column: 0 });
        }

        function getInvoice(value) {

        }
        $(function () {
            String.prototype.format = function () {
                var args = arguments;
                return this.replace(/{(\d+)}/g,
                    function (match, number) {
                        return typeof args[number] != 'undefined' ? args[number] : match;
                    });
            };
        });
        function submitCart(value,info,lol) {
            var url = "api/RentCart?commaSeparatedIds={0}&viewStateTime={1}";
            var items = value;
            var time = value;

            $.ajax({
                url: url,
                jsonp: "callback",
                dataType: "jsonp",
                success: function (data) {},
                error: function (data) {}
            });
        }

        function enumType(dataIndex) {
            switch (dataIndex) {
                case 1:
                    return 'Heavy';
                case 2:
                    return 'Regular';
                case 3:
                    return 'Specialized';
            }
            return 'Unknown';
        }
    </script>
    <title>Equipment catalog</title>
</head>
<body id="s-Page" class="fixed sidebar-mini hold-transition skin-green-light has-layout-event">

    <div class="wrapper">

        <div class="content-wrapper">
            <section class="content-header container">

                <h1>
                    Equipment<small>
                        todo: add a timestamp, resize after orientation/dimension change, set up paging, implement search,
                        type format in details, input validation, disallow an ability to add empty / duplicate instances, time format,
                        currency format, right-to-left support.
                    </small>
                </h1>

            </section>
            <section class="content container">

                <div class="row">
                    <div class="col-md-8 col-sm-6">
                        <div class="box box-primary">
                            <div class="box-header with-border">
                                <h3 class="box-title">Catalog</h3>
                                <div class="box-tools pull-right">
                                    <div class="has-feedback">
                                        <input type="text" class="form-control input-sm" placeholder="Search Equipment" disabled="disabled">
                                        <span class="glyphicon glyphicon-search form-control-feedback"></span>
                                    </div>
                                </div>
                            </div>
                            <div class="box-body no-padding">
                                <div class="table-responsive mailbox-messages">
                                    @(Html.X().GridPanel()
                      .ID("GridPanel2")
                      .Layout(LayoutType.Fit)
                      .Height(480)
                      .Store(Html.X().Store()
                          .Buffered(true)
                          .RemoteFilter(true)
                          .LeadingBufferZone(1000)
                          .PageSize(50)
                          .Proxy(Html.X().JsonPProxy()
                              .Url("http://localhost:6040/api/Equipment?")
                              .SimpleSortMode(true)
                              .FilterParam("query")
                              .Reader(
                                  Html.X().JsonReader()
                                      .RootProperty("Equipment")
                                      .TotalProperty("Total")
                              )
                              .ExtraParams(xparams =>
                              {
                                  xparams.Add(Html.X().Parameter().Name("skip").Value("0").Mode(ParameterMode.Raw));
                                  xparams.Add(Html.X().Parameter().Name("take").Value("100").Mode(ParameterMode.Raw));
                              }
                              )
                              .CustomConfig(config => { config.Add(new { encodeFilters = JRawValue.From("function (filters) { return filters[0].value; }") }); })
                          )
                          .Model(Html.X().Model()
                              .IDProperty("post_id")
                              .Fields(
                                  new ModelField("title") { Mapping = "topic_title" },
                                  new ModelField("forumtitle") { Mapping = "forum_title" },
                                  new ModelField("forumid", ModelFieldType.Int),
                                  new ModelField("username") { Mapping = "author" },
                                  new ModelField("replycount", ModelFieldType.Int) { Mapping = "reply_count" },
                                  new ModelField("lastpost", ModelFieldType.Date, "timestamp") { Mapping = "post_time" },
                                  new ModelField("lastposter"),
                                  new ModelField("excerpt"),
                                  new ModelField("topic_id")
                              )
                          )
                      )
                      .ColumnModel(
                          Html.X().Column()
                              .Text("Id")
                              .DataIndex("Id"),
                          Html.X().Column()
                              .Text("Name")
                              .DataIndex("Name")
                              .Flex(1),
                          Html.X().Column()
                              .Text("Type")
                              .DataIndex("Type")
                              .Width(90)
                              .Align(Alignment.Center)
                              .Sortable(false)
                              .Renderer("enumType")
                      )
                      .View(Html.X().GridView().TrackOver(false))
                      .Listeners(l => l.SelectionChange.Handler = "if (selected[0]) { fillDetails(selected[0]); }")
                      .SelectionModel(Html.X().RowSelectionModel().PruneRemoved(false).Mode(SelectionMode.Multi))

                                    )
                                </div>
                            </div>
                        </div>
                    </div>
                    <div id="detailsContainer" class="col-md-4 col-sm-6">
                        <div class="box box-primary">
                            <div class="box box-solid">
                                <div class="box-header with-border">
                                    <h3 class="box-title">Order details</h3> <span class="pull-right">id: <span id="detailsId"></span></span>
                                </div>

                                <div class="box-body no-padding">
                                    <form>
                                        <div class="form-group">
                                            <label for="detailsName" class="col-md-12 control-label">Name :</label>
                                            <div class="col-md-12">
                                                <input type="text" id="detailsName" Class="form-control form-fixer" disabled />
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <label for="detailsType" class="col-md-12 control-label">Type :</label>
                                            <div class="col-md-12">
                                                <input type="text" id="detailsType" Class="form-control form-fixer" disabled />
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <label for="detailsDuration" class="col-md-12 control-label">Duration :</label>
                                            <div class="col-md-12">
                                                <input type="text" id="detailsDuration" Class="form-control form-fixer" />
                                            </div>
                                        </div>
                                        <span>&nbsp;</span>
                                        <!--

                                        <div class="form-actions">
                                            <div class="btn-group col-xs-12" role="group" aria-label="...">
                                                <button id="detailsCancel" type="button" class="btn col-xs-6 btn-default">Cancel</button>
                                                <button id="detailsAdd" type="button" class="btn col-xs-6 btn-primary">Add to Cart</button>
                                            </div>
                                        </div>
                                        <span>&nbsp;</span>
                                        -->
                                    </form>
                                </div>
                            </div>

                        </div>
                        <span>
                            Todo: might need quantity, location, availability
                        </span>
                    </div>
                    <div class="col-md-12 col-sm-12">
                        <div class="box box-primary">
                            <div class="box-header with-border">
                                <h3 class="box-title">Cart</h3> <span>todo: do not add empty / duplicate instances, time format</span>
                            </div>
                            <div class="box-body no-padding">
                                <div class="table-responsive mailbox-messages">
                                    @(Html.X().GridPanel()
                      .ID("GridPanel1")
                      .Layout(LayoutType.Fit)
                      .Height(280)
                      .Store(
                          Html.X().Store()
                              .Model(
                                  Html.X().Model()
                                      .Name("Order")
                                      .Fields(
                                          Html.X().ModelField().Name("Id").Type(ModelFieldType.Int),
                                          Html.X().ModelField().Name("Name").Type(ModelFieldType.String),
                                          Html.X().ModelField().Name("Type").Type(ModelFieldType.Int),
                                          Html.X().ModelField().Name("Duration").Type(ModelFieldType.Int),
                                          Html.X().ModelField().Name("TimeAdded").Type(ModelFieldType.Date).DateFormat("MM/dd/yyyy")
                                      )
                              )
                              .Sorters(
                                  Html.X().DataSorter().Property("common").Direction(Ext.Net.SortDirection.ASC)
                              )
                      )
                      .TopBarItem(
                          Html.X().Button().ID("addOrder").Text("Add order").Handler("addOrder"),
                          Html.X().Button().ID("submitCart").Text("Submit cart").Handler("submitCart")
                      )
                      .ColumnModel(
                          Html.X().Column()
                              .Text("Id")
                              .DataIndex("Id"),
                          Html.X().Column()
                              .Text("Name")
                              .DataIndex("Name")
                              .Flex(1),
                          Html.X().Column()
                              .Text("Type")
                              .DataIndex("Type")
                              .Width(70)
                              .Align(Alignment.Center)
                              .Renderer("enumType")
                              .Sortable(false),
                          Html.X().Column()
                              .Text("Duration")
                              .DataIndex("Duration")
                              .Width(90)
                              .Align(Alignment.Center)
                              .Sortable(false),
                          Html.X().Column()
                              .Text("Time added")
                              .DataIndex("TimeAdded")
                              .Width(120)
                              .Align(Alignment.Center)
                              .Sortable(false),
                          Html.X().ImageCommandColumn()
                              .Width(30)
                              .Commands(
                                  Html.X().ImageCommand()
                                      .Icon(Icon.Decline)
                                      .ToolTip(t => { t.Text = "Delete order"; })
                                      .CommandName("delete")
                              )
                              .Listeners(l => { l.Command.Handler = "this.up('gridpanel').store.removeAt(recordIndex);"; })
                      )
                      .SelectionModel(
                          Html.X().CellSelectionModel()
                      )
                      .Plugins(
                          Html.X().CellEditing().ClicksToEdit(1)
                      )
                                    )


                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-12 col-sm-12">
                        <div class="box box-primary">
                            <div class="box-header with-border">
                                <h3 class="box-title">Subscribtions</h3> <span>todo: add item availability checks</span>
                            </div>
                            <div class="box-body no-padding">
                                <div class="table-responsive mailbox-messages">
                                    @(Html.X().GridPanel()
                      .ID("GridPanel3")
                      .Layout(LayoutType.Fit)
                      .Height(280)
                      .Store(
                          Html.X().Store()
                              .Model(
                                  Html.X().Model()
                                      .Name("Order")
                                      .Fields(
                                          Html.X().ModelField().Name("Id").Type(ModelFieldType.Int),
                                          Html.X().ModelField().Name("Name").Type(ModelFieldType.String),
                                          Html.X().ModelField().Name("Type").Type(ModelFieldType.Int),
                                          Html.X().ModelField().Name("Duration").Type(ModelFieldType.Int),
                                          Html.X().ModelField().Name("TimeAdded").Type(ModelFieldType.Date).DateFormat("MM/dd/yyyy")
                                      )
                              )
                              .Sorters(
                                  Html.X().DataSorter().Property("common").Direction(Ext.Net.SortDirection.ASC)
                              )
                      )
                      .TopBarItem(
                          Html.X().Button().ID("getInvoice").Text("Get invoice").Handler("getInvoice")
                      )
                      .ColumnModel(
                          Html.X().Column()
                              .Text("Id")
                              .DataIndex("Id"),
                          Html.X().Column()
                              .Text("Name")
                              .DataIndex("Name")
                              .Flex(1),
                          Html.X().Column()
                              .Text("Type")
                              .DataIndex("Type")
                              .Width(70)
                              .Align(Alignment.Center)
                              .Renderer("enumType")
                              .Sortable(false),
                          Html.X().Column()
                              .Text("Duration")
                              .DataIndex("Duration")
                              .Width(90)
                              .Align(Alignment.Center)
                              .Sortable(false),
                          Html.X().Column()
                              .Text("Time added")
                              .DataIndex("TimeAdded")
                              .Width(120)
                              .Align(Alignment.Center)
                              .Sortable(false),
                          Html.X().ImageCommandColumn()
                              .Width(30)
                              .Commands(
                                  Html.X().ImageCommand()
                                      .Icon(Icon.Decline)
                                      .ToolTip(t => { t.Text = "Delete order"; })
                                      .CommandName("delete")
                              )
                              .Listeners(l => { l.Command.Handler = "this.up('gridpanel').store.removeAt(recordIndex);"; })
                      )
                      .SelectionModel(
                          Html.X().CellSelectionModel()
                      )
                      .Plugins(
                          Html.X().CellEditing().ClicksToEdit(1)
                      )
                                    )


                                </div>
                            </div>
                        </div>
                        <span>
                            Todo: Add service that processes subscriptions, if any item is unavailable ask user confirmation
                            - user might only want a bundle or nothing at all.
                        </span>
                    </div>

                </div>
            </section>
        </div>
        <div class="control-sidebar-bg"></div>
    </div>
</body>
</html>